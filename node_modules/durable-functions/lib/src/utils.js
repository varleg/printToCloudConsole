"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class Utils {
    static processInput(input) {
        if (typeof input === "string") {
            input = JSON.stringify(input);
        }
        return input;
    }
    static getInstancesOf(collection, typeInstance) {
        return collection && typeInstance
            ? Object.keys(collection)
                .filter((key) => this.hasAllPropertiesOf(collection[key], typeInstance))
                .map((key) => collection[key])
            : [];
    }
    static getHrMilliseconds(times) {
        return times[0] * 1000 + times[1] / 1e6;
    }
    static hasAllPropertiesOf(obj, refInstance) {
        return (typeof refInstance === "object" &&
            typeof obj === "object" &&
            obj !== null &&
            Object.keys(refInstance).every((key) => {
                return obj.hasOwnProperty(key);
            }));
    }
    static ensureNonNull(argument, message) {
        if (argument === undefined) {
            throw new TypeError(message);
        }
        return argument;
    }
    static sleep(delayInMilliseconds) {
        return new Promise((resolve) => setTimeout(resolve, delayInMilliseconds));
    }
    static throwIfNotInstanceOf(value, name, refInstance, type) {
        if (!this.hasAllPropertiesOf(value, refInstance)) {
            throw new TypeError(`${name}: Expected object of type ${type} but got ${typeof value}; are you missing properties?`);
        }
    }
    static throwIfEmpty(value, name) {
        if (typeof value !== "string") {
            throw new TypeError(`${name}: Expected non-empty, non-whitespace string but got ${typeof value}`);
        }
        else if (value.trim().length < 1) {
            throw new Error(`${name}: Expected non-empty, non-whitespace string but got empty string`);
        }
    }
    static throwIfNotNumber(value, name) {
        if (typeof value !== "number") {
            throw new TypeError(`${name}: Expected number but got ${typeof value}`);
        }
    }
}
exports.Utils = Utils;
//# sourceMappingURL=utils.js.map